# auth.py
from os import access

from fyers_api import accessToken
from fyers_apiv3 import fyersModel
import webbrowser
import requests
from config import CLIENT_ID, SECRET_KEY, REDIRECT_URI, RESPONSE_TYPE, STATE, GRANT_TYPE


class Auth:
    def __init__(self):
        self.client_id = CLIENT_ID
        self.secret_key = SECRET_KEY
        self.redirect_uri = REDIRECT_URI
        self.response_type = RESPONSE_TYPE
        self.state = STATE
        self.grant_type = GRANT_TYPE
        self.appSession = None

    def generate_auth_code(self):
        # Initialize the SessionModel with the necessary parameters
        self.appSession = fyersModel.SessionModel(
            client_id=self.client_id,
            secret_key=self.secret_key,
            redirect_uri=self.redirect_uri,
            response_type=self.response_type
        )

        # Generate the auth URL
        try:
            auth_url = self.appSession.generate_authcode()
            # print(auth_url)
            print("Opening the login URL in the browser...")
            webbrowser.open(auth_url, new=1)
            print("Please log in and paste the auth code here.")
        except AttributeError as e:
            print("Error: ", e)
            print("Please verify the SDK documentation for correct usage.")

    # def get_access_token(self, auth_code):
    #     """Exchange the authorization code for an access token."""
    #     url = "https://api.fyers.in/api/v3/token"
    #     payload = {
    #         "client_id": self.client_id,
    #         "redirect_uri": self.redirect_uri,
    #         "grant_type": "authorization_code",
    #         "code": auth_code,
    #     }
    #     headers = {"Content-Type": "application/x-www-form-urlencoded"}
    #
    #     response = requests.post(data=payload, headers=headers)
    #     if response.status_code == 200:
    #         token_data = response.json()
    #         if token_data.get("s") == "ok":
    #             access_token = token_data["access_token"]
    #             print("Access token:", access_token)
    #             return access_token
    #         else:
    #             print("Failed to generate access token:", token_data)
    #             return None
    #     else:
    #         print("HTTP Error:", response.status_code, response.text)
    #         return None

    def generate_access_token(self, auth_code):
        function_name = "generate_access_token"

        """
        	1. this function takes the param auth_code, appId, secret_key and return the access_token
	        2. the access_token created will be used further .(in fyersModel)]
	        3. one can get the auth_code from the url generated by getauthToken function (from auth_code= ..... &user_Id=xxxxxxbefore&)

        """

        # creating an instance appSession by passing appID, secretKey and redirect url etc. as parameter
        appSession = fyersModel.SessionModel(
            client_id=self.client_id,
            secret_key=self.secret_key,
            redirect_uri=self.redirect_uri,
            response_type=self.response_type,
            grant_type=self.grant_type
        )

        # set the authorization code in the session object
        appSession.set_token(auth_code)

        # generate the access token using the authorization code
        response = appSession.generate_token()
        # print(response)
        if response["code"] == 200:
            token_data = response
            if token_data["s"] == "ok":
                access_token = token_data["access_token"]
                # print("Access token:", access_token)
                return access_token
            else:
                print("Failed to generate access token:", token_data)
                return None
        else:
            print("HTTP Error:", response.status_code, response.text)
            return None